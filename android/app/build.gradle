def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '6'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '6.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {

    
    //     signingConfigs {
    //     release  {
    //         // keyAlias 'wisesoft.keystore'
    //         // keyPassword 'wisesoft'
    //         // storeFile file('../keystore/wisesoft.keystore')
    //         // storePassword 'wisesoft'
    //          keyAlias keystoreProperties['keyAlias']
    //        keyPassword keystoreProperties['keyPassword']
    //        storeFile file(keystoreProperties['storeFile'])
    //      storePassword keystoreProperties['storePassword'] 
    //     }
    // }


    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.cn.metc.jj"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            // signingConfig signingConfigs.debug
                  signingConfig signingConfigs.debug
            //   signingConfig signingConfigs.release
            //  minifyEnabled true
            //  shrinkResources true
            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
        
        //           debug {
        //     // TODO: Add your own signing config for the release build.
        //     // Signing with the debug keys for now, so `flutter run --release` works.
        //     signingConfig signingConfigs.debug
        // }


    }
}

flutter {
    source '../..'
}

dependencies {
    def devFile = project.file("${rootProject.projectDir.getParentFile().parentFile}/android/.plugin_dev")
    if (devFile.exists()) {
        implementation fileTree(dir: "${rootProject.projectDir.getParentFile().parentFile}/android/libs", include: ["*.aar"])
    }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
