import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';

import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_20240407_code_wall/subview/Autogenerated.dart';
import 'package:flutter_20240407_code_wall/subview/User.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;

/**
 * 列表和网络请求
 */
class listviewJson extends StatefulWidget {
  const listviewJson({super.key});

  @override
  State<listviewJson> createState() => _listviewJsonState();
}

class _listviewJsonState extends State<listviewJson> {
  List<String> dataList = [];

  List<Autogenerated> auto_dataList = [];


  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    // fetchDataFromServer();
     fetchDataFromApi();
  }

  Future<void> fetchDataFromServer() async {
    try {
      final response = await http
          .get(Uri.parse('https://jsonplaceholder.typicode.com/posts'));
          print("------------------------fetchDataFromServer--------------------${response.statusCode }");
      if (response.statusCode == 200) {
        List<dynamic> jsonResponse = jsonDecode(response.body);
        List<String> newDataList = [];
        for (var item in jsonResponse) {
          newDataList.add(item['title']); // 假设服务器返回的数据中有一个'title'字段
        }
        setState(() {
          dataList = newDataList;
        });
      } else {
        throw Exception('Failed to load data from server');
      }
    } catch (e) {
      print('----------------------Error: $e');
    }
  }




 Future<void> fetchDataFromApi() async {
    try {
      final response = await http.get(Uri.parse('https://3g.163.com/photocenter/api/list/0001/00AP0001,3R710001,4T8E0001/30/3.json')
      // ,headers:{"Content-Type": "application/json"}
 );
        print("------------------------fetchDataFromApi--------------------${response.statusCode }");
      if (response.statusCode == 200) {

      //             Map<String, dynamic> jsonData = jsonDecode(response.body);
        print("------------------------fetchDataFromApi-----------body------1---${response.body}");
      // List<dynamic> jsonDatae = jsonDecode(response.body);
      //     print("------------------------fetchDataFromApi-----------body-----2----${response.body}");
      //   List<Autogenerated> newList = jsonDatae.map((item) => Autogenerated.fromJson(jsonData)).toList();

        Map<String, dynamic> jsonData = jsonDecode(response.body);
         print("------------------------fetchDataFromApi-----------body------2---${response.body}");
         List<dynamic> data = jsonData['data'];
        print("------------------------fetchDataFromApi-----------body-----3---${response.body}");

  // List<Autogenerated> newList = data.map((item) => Autogenerated.fromJson(item)).toList();
 
    //     setState(() {
    // auto_dataList = newList;
    //     });



      } else {
        throw Exception('Failed to load data from API');
      }
    } catch (e) {
      print('Error: $e');
    }
  }



  @override
  Widget build(BuildContext context) {

    print("---------------build----------------列表和网络请求--------------");
    return Scaffold(
      appBar: AppBar(
        title: Text(
          "列表和网络请求",
          style: TextStyle(fontSize: 16, color: Colors.red),
        ),
        leading: null,
        automaticallyImplyLeading: false,
        centerTitle: true,
      ),
      backgroundColor: Colors.grey,
      body: Column(
        children: [
          Expanded(
              child: ListView.separated(
            itemCount: auto_dataList.length, 
           separatorBuilder: (context, index) { 
                return Divider(color: Colors.red); // 这里可以自定义分隔线的样式
              },
            itemBuilder: (context, index) {
                String tcover = auto_dataList[index].tcover ?? '';
              // 根据索引决定不同的背景颜色
                      Color? backgroundColor = index % 2 == 0 ? Colors.blue[100] : Colors.blue[200]; 
              return Container(
                 color: backgroundColor,
                child: ListTile(
                title: Text('Item ${auto_dataList[index].setname}'), 
                subtitle: Text('Item ${auto_dataList[index].desc}'),

                
                // leading: NetworkImage(tcover),
                leading: Image.network(tcover),

              ),
              );
            },
          ))
        ],
      ),
    );
  }
}
